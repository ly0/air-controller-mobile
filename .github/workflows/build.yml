name: Build APK

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew clean assembleRelease
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30
    
    - name: Get version info
      id: version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle | awk '{print $2}' | sed 's/"//g')
        VERSION_CODE=$(grep "versionCode" app/build.gradle | awk '{print $2}')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "Version Name: $VERSION_NAME"
        echo "Version Code: $VERSION_CODE"
    
    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release-unsigned.apk
        generate_release_notes: true
        name: Release ${{ steps.version.outputs.version_name }}
        body: |
          ## 版本信息
          - 版本名称: ${{ steps.version.outputs.version_name }}
          - 版本代码: ${{ steps.version.outputs.version_code }}
          
          ## 下载
          下载 APK 文件并安装到您的 Android 设备。
          
          注意：这是未签名的 APK，您可能需要在设备上启用"允许安装未知来源应用"。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-signed:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Decode Keystore
      if: ${{ env.KEYSTORE_BASE64 != '' }}
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo $KEYSTORE_BASE64 | base64 --decode > keystore.jks
        fi
    
    - name: Build Signed APK
      if: ${{ env.KEYSTORE_BASE64 != '' }}
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          ./gradlew clean assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD
        else
          ./gradlew clean assembleRelease
        fi
    
    - name: Upload Signed APK
      if: ${{ env.KEYSTORE_BASE64 != '' }}
      uses: actions/upload-artifact@v4
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      with:
        name: app-release-signed
        path: app/build/outputs/apk/release/app-release.apk
        retention-days: 30
    
    - name: Clean up keystore
      if: always()
      run: rm -f keystore.jks